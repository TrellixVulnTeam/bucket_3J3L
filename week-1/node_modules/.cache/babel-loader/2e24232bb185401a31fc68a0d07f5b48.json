{"ast":null,"code":"var _jsxFileName = \"/Users/jayonglee/00_Study/Javascript/spartaReact/week-1/src/components/SwipeItem.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport img from \"../scc_img01.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SwipeItem = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(_ref => {\n  _s();\n\n  let {\n    onSwipe\n  } = _ref;\n  const swipe_div = React.useRef(null);\n  let swipe_status = \"ready\";\n  let target_classname = \"\";\n  let coordinate = {\n    start_x: 0,\n    start_y: 0,\n    end_x: 0,\n    end_y: 0\n  };\n  React.useEffect(() => {\n    const reset = () => {\n      //   console.log(\"in reset\");\n      swipe_status = \"ready\";\n      coordinate = {\n        start_x: 0,\n        start_y: 0,\n        end_x: 0,\n        end_y: 0\n      };\n      swipe_div.current.className = target_classname;\n      swipe_div.current.style.left = 0 + \"px\";\n      swipe_div.current.style.top = 0 + \"px\";\n    };\n\n    const touchStart = e => {\n      //   console.log(\"start\");\n      // 터치 시작 시, swipe_status를 touchstart로 변경해줍니다.\n      // 그리고 터치 시작한 좌표를 기록합니다!\n      // (중요! 그래야 터치 종료할 때 위치를 보고 왼쪽인지, 오른쪽인지 판별할 수 있겠죠!)\n      swipe_status = \"touchstart\";\n      target_classname = swipe_div.current.className; // console로 터치 이벤트가 시작될 때 좌표를 확인해볼까요?\n      //   console.log(e.touches[0]);\n      //   console.log(e.touches[0].clientX);\n      //   console.log(e.touches[0].clientY);\n      //   좌표도 기록해줍니다 :)\n\n      coordinate = { ...coordinate,\n        start_x: e.touches[0].clientX,\n        start_y: e.touches[0].clientY\n      };\n    };\n\n    const touchEnd = e => {\n      swipe_status = \"touchend\"; //  touchEnd이벤트는 touches 대신, changedTouches가 있어요.\n      //   console.log(e.changedTouches[0]);\n\n      coordinate = { ...coordinate,\n        end_x: e.changedTouches[0].clientX,\n        end_y: e.changedTouches[0].clientY\n      }; //   x좌표 이동 거리를 구해줍니다.\n\n      let diff_x = coordinate.end_x - coordinate.start_x; //   스와이프 방향 / 기본은 left로 뒀습니다!\n\n      let direct = \"left\"; // Match.abs() : 절대값을 구해주는 친구입니다.\n\n      if (Math.abs(diff_x) > 50) {\n        swipe_div.current.className = target_classname + \" swipe\"; // 움직인 방향에 따라 더 옴직이고 투명도를 0으로 (점점 사라지게) 줘봐요!\n\n        if (diff_x > 0) {\n          // console.log('move right');\n          direct = \"right\";\n          swipe_div.current.style.left = diff_x + 150 + \"px\";\n          swipe_div.current.style.opacity = 0;\n        } else {\n          direct = \"left\"; // console.log('move left');\n          //   console.log(diff_x - 150);\n\n          swipe_div.current.style.left = diff_x - 150 + \"px\";\n          swipe_div.current.style.opacity = 0;\n        } // 300 ms후 reset 해줍니다!\n        // 이 300ms는 props로 받아서 처리해줘도 좋겠네요!\n        // props로 받아온, 콜백 함수도 여기서 처리해줄게요!\n\n\n        window.setTimeout(() => {\n          reset();\n          onSwipe(direct);\n        }, 300);\n        return;\n      } //   reset 해줍니다.\n\n\n      reset();\n    };\n\n    const touchMove = e => {\n      // 스와이프 중 다른 이벤트가 발생하는 것을 막아줍니다\n      e.preventDefault(); //   console.log(\"in touch move!\");\n      // 현재 좌표(이동 중인 좌표)를 기록해줍니다.\n\n      let current_coordinate = {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      }; //   콘솔로 이동한 값이 어떻게 나오는 지 한번 확인해볼까요?\n      //   console.log(\n      //     current_coordinate.x - coordinate.start_x,\n      //     current_coordinate.y - coordinate.start_y\n      //   );\n      //   터치 중일 때 div가 따라 움직이도록 해줍시다!\n\n      swipe_div.current.style.left = current_coordinate.x - coordinate.start_x + \"px\";\n      swipe_div.current.style.top = current_coordinate.y - coordinate.start_y + \"px\";\n    }; // 터치 이벤트가 취소될 경우 원래 상태로 돌려줍니다!\n\n\n    const touchCancel = e => {\n      swipe_status = \"cancel\";\n      reset();\n    };\n\n    swipe_div.current.addEventListener(\"touchstart\", touchStart);\n    swipe_div.current.addEventListener(\"touchend\", touchEnd);\n    swipe_div.current.addEventListener(\"touchmove\", touchMove);\n    swipe_div.current.addEventListener(\"touchcancel\", touchCancel); // 이부분은 이벤트 해제 부분이에요!\n\n    return () => {\n      // 만약 이벤트 걸었던 엘리먼트가 없으면 해제하지 않습니다!\n      if (!swipe_div.current) {\n        return;\n      }\n\n      swipe_div.current.removeEventListener(\"touchstart\", touchStart);\n      swipe_div.current.removeEventListener(\"touchend\", touchEnd);\n      swipe_div.current.removeEventListener(\"touchmove\", touchMove);\n      swipe_div.current.removeEventListener(\"touchcancel\", touchCancel);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DragItem, {\n    ref: swipe_div,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: img\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}, \"/IC+tqoEKY08no19w1c4a8bdE4I=\")), \"/IC+tqoEKY08no19w1c4a8bdE4I=\");\n\n_c2 = SwipeItem;\nconst DragItem = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n\n    &.swipe {\n        transition: 300ms;\n    }\n\n    & > div {\n        border-radius: 500px;\n        background-color: #ffd6aa;\n    }\n    & img {\n        max-width: 150px;\n    }\n`;\n_c3 = DragItem;\nSwipeItem.defaultProps = {\n  onSwipe: direction => {}\n};\nexport default SwipeItem;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SwipeItem$React.memo\");\n$RefreshReg$(_c2, \"SwipeItem\");\n$RefreshReg$(_c3, \"DragItem\");","map":{"version":3,"names":["React","styled","img","SwipeItem","memo","onSwipe","swipe_div","useRef","swipe_status","target_classname","coordinate","start_x","start_y","end_x","end_y","useEffect","reset","current","className","style","left","top","touchStart","e","touches","clientX","clientY","touchEnd","changedTouches","diff_x","direct","Math","abs","opacity","window","setTimeout","touchMove","preventDefault","current_coordinate","x","y","touchCancel","addEventListener","removeEventListener","DragItem","div","defaultProps","direction"],"sources":["/Users/jayonglee/00_Study/Javascript/spartaReact/week-1/src/components/SwipeItem.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport img from \"../scc_img01.png\";\n\nconst SwipeItem = React.memo(({ onSwipe }) => {\n    const swipe_div = React.useRef(null);\n    let swipe_status = \"ready\";\n    let target_classname = \"\";\n    let coordinate = {\n        start_x: 0,\n        start_y: 0,\n        end_x: 0,\n        end_y: 0,\n    };\n\n    React.useEffect(() => {\n        const reset = () => {\n            //   console.log(\"in reset\");\n            swipe_status = \"ready\";\n\n            coordinate = {\n                start_x: 0,\n                start_y: 0,\n                end_x: 0,\n                end_y: 0,\n            };\n\n            swipe_div.current.className = target_classname;\n\n            swipe_div.current.style.left = 0 + \"px\";\n            swipe_div.current.style.top = 0 + \"px\";\n        };\n\n        const touchStart = (e) => {\n            //   console.log(\"start\");\n\n            // 터치 시작 시, swipe_status를 touchstart로 변경해줍니다.\n            // 그리고 터치 시작한 좌표를 기록합니다!\n            // (중요! 그래야 터치 종료할 때 위치를 보고 왼쪽인지, 오른쪽인지 판별할 수 있겠죠!)\n            swipe_status = \"touchstart\";\n            target_classname = swipe_div.current.className;\n            // console로 터치 이벤트가 시작될 때 좌표를 확인해볼까요?\n            //   console.log(e.touches[0]);\n            //   console.log(e.touches[0].clientX);\n            //   console.log(e.touches[0].clientY);\n\n            //   좌표도 기록해줍니다 :)\n            coordinate = {\n                ...coordinate,\n                start_x: e.touches[0].clientX,\n                start_y: e.touches[0].clientY,\n            };\n        };\n\n        const touchEnd = (e) => {\n            swipe_status = \"touchend\";\n            //  touchEnd이벤트는 touches 대신, changedTouches가 있어요.\n            //   console.log(e.changedTouches[0]);\n            coordinate = {\n                ...coordinate,\n                end_x: e.changedTouches[0].clientX,\n                end_y: e.changedTouches[0].clientY,\n            };\n\n            //   x좌표 이동 거리를 구해줍니다.\n            let diff_x = coordinate.end_x - coordinate.start_x;\n            //   스와이프 방향 / 기본은 left로 뒀습니다!\n            let direct = \"left\";\n\n            // Match.abs() : 절대값을 구해주는 친구입니다.\n            if (Math.abs(diff_x) > 50) {\n                swipe_div.current.className = target_classname + \" swipe\";\n\n                // 움직인 방향에 따라 더 옴직이고 투명도를 0으로 (점점 사라지게) 줘봐요!\n                if (diff_x > 0) {\n                    // console.log('move right');\n                    direct = \"right\";\n                    swipe_div.current.style.left = diff_x + 150 + \"px\";\n                    swipe_div.current.style.opacity = 0;\n                } else {\n                    direct = \"left\";\n                    // console.log('move left');\n                    //   console.log(diff_x - 150);\n                    swipe_div.current.style.left = diff_x - 150 + \"px\";\n                    swipe_div.current.style.opacity = 0;\n                }\n\n                // 300 ms후 reset 해줍니다!\n                // 이 300ms는 props로 받아서 처리해줘도 좋겠네요!\n                // props로 받아온, 콜백 함수도 여기서 처리해줄게요!\n                window.setTimeout(() => {\n                    reset();\n                    onSwipe(direct);\n                }, 300);\n                return;\n            }\n\n            //   reset 해줍니다.\n            reset();\n        };\n\n        const touchMove = (e) => {\n            // 스와이프 중 다른 이벤트가 발생하는 것을 막아줍니다\n            e.preventDefault();\n\n            //   console.log(\"in touch move!\");\n            // 현재 좌표(이동 중인 좌표)를 기록해줍니다.\n            let current_coordinate = {\n                x: e.touches[0].clientX,\n                y: e.touches[0].clientY,\n            };\n\n            //   콘솔로 이동한 값이 어떻게 나오는 지 한번 확인해볼까요?\n            //   console.log(\n            //     current_coordinate.x - coordinate.start_x,\n            //     current_coordinate.y - coordinate.start_y\n            //   );\n\n            //   터치 중일 때 div가 따라 움직이도록 해줍시다!\n            swipe_div.current.style.left = current_coordinate.x - coordinate.start_x + \"px\";\n            swipe_div.current.style.top = current_coordinate.y - coordinate.start_y + \"px\";\n        };\n\n        // 터치 이벤트가 취소될 경우 원래 상태로 돌려줍니다!\n        const touchCancel = (e) => {\n            swipe_status = \"cancel\";\n            reset();\n        };\n\n        swipe_div.current.addEventListener(\"touchstart\", touchStart);\n        swipe_div.current.addEventListener(\"touchend\", touchEnd);\n        swipe_div.current.addEventListener(\"touchmove\", touchMove);\n        swipe_div.current.addEventListener(\"touchcancel\", touchCancel);\n\n        // 이부분은 이벤트 해제 부분이에요!\n        return () => {\n            // 만약 이벤트 걸었던 엘리먼트가 없으면 해제하지 않습니다!\n            if (!swipe_div.current) {\n                return;\n            }\n            swipe_div.current.removeEventListener(\"touchstart\", touchStart);\n            swipe_div.current.removeEventListener(\"touchend\", touchEnd);\n            swipe_div.current.removeEventListener(\"touchmove\", touchMove);\n            swipe_div.current.removeEventListener(\"touchcancel\", touchCancel);\n        };\n    }, []);\n\n    return (\n        <DragItem ref={swipe_div}>\n            <img src={img} />\n        </DragItem>\n    );\n});\n\nconst DragItem = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n\n    &.swipe {\n        transition: 300ms;\n    }\n\n    & > div {\n        border-radius: 500px;\n        background-color: #ffd6aa;\n    }\n    & img {\n        max-width: 150px;\n    }\n`;\n\nSwipeItem.defaultProps = {\n    onSwipe: (direction) => {},\n};\n\nexport default SwipeItem;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}