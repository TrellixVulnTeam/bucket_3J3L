[{"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/index.js":"1","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/App.js":"2","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/reportWebVitals.js":"3","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/BucketList.js":"4","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Detail.js":"5","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/NotFound.js":"6","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/redux/configStore.js":"7","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/redux/modules/bucket.js":"8","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Progress.js":"9","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/firebase.js":"10","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Spinner.js":"11"},{"size":845,"mtime":1660057431777,"results":"12","hashOfConfig":"13"},{"size":3786,"mtime":1661006181788,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1659924596105,"results":"15","hashOfConfig":"13"},{"size":2848,"mtime":1661006871011,"results":"16","hashOfConfig":"13"},{"size":1828,"mtime":1661006263716,"results":"17","hashOfConfig":"13"},{"size":377,"mtime":1660055217279,"results":"18","hashOfConfig":"13"},{"size":541,"mtime":1660057366655,"results":"19","hashOfConfig":"13"},{"size":1839,"mtime":1661005985887,"results":"20","hashOfConfig":"13"},{"size":792,"mtime":1660887268965,"results":"21","hashOfConfig":"13"},{"size":600,"mtime":1660831026149,"results":"22","hashOfConfig":"13"},{"size":508,"mtime":1660887896730,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"tj0kd7",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/index.js",[],[],[],"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/App.js",["63","64","65","66","67","68","69"],[],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Route, Routes, useLocation } from \"react-router-dom\";\nimport { connect, Connect, useDispatch, useSelector } from \"react-redux\";\nimport { createBucket, isLoaded, loadBucket } from \"./redux/modules/bucket\";\nimport { addDoc, collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\n\n// import [컴포넌트 명] from [컴포넌트가 있는 파일경로];\nimport BucketList from \"./BucketList\";\nimport styled from \"styled-components\";\nimport Detail from \"./Detail\";\nimport NotFound from \"./NotFound\";\nimport Progress from \"./Progress\";\nimport Spinner from \"./Spinner\";\n\n// 이 함수는 스토어가 가진 상태값을 props로 받아오기 위한 함수예요.\nconst mapStateTopProps = (state) => ({\n    bucket_list: state.bucket.list,\n});\n\n// 이 함수는 값을 변화시키기 위한 액션 생성 함수를 props로 받아오기 위한 함수예요.\nconst mapDispatchToProps = (dispatch) => ({\n    load: () => {\n        dispatch(loadBucket());\n    },\n    create: (new_item) => {\n        console.log(new_item);\n        dispatch(createBucket(new_item));\n    },\n});\n\n// 클래스형 컴포넌트는 이렇게 생겼습니다!\nconst App = () => {\n    const dispatch = useDispatch();\n    //const bucket_list = useSelector((state) => state.bucket.list);\n    let is_Loaded = useSelector((state) => state.bucket.is_Loaded);\n\n    useEffect(() => {\n        let bucket_data = [];\n        const querySnapshot = getDocs(collection(db, \"bucket_list\"));\n\n        querySnapshot.then(function (data) {\n            data.forEach((doc) => {\n                if (doc.exists) {\n                    bucket_data = [...bucket_data, { id: doc.id, ...doc.data() }];\n                }\n            });\n            dispatch(loadBucket(bucket_data));\n            dispatch(isLoaded(true));\n        });\n\n        // [] 디펜던시가 없다면 componentDidMount, componentDidUpdate 호출 (업데이트 될때마다 호출)\n        // [] 디펜던시가 있다면 위 function은 componentDidMount 일때만 호출 (componentDidMount 일때 한번만 실행)\n\n        return () => {\n            console.log(\"컴포넌트가 화면에서 사라짐\");\n        };\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <Container>\n                <Title>내 버킷리스트</Title>\n                <Progress />\n                <Line />\n                {/* 컴포넌트를 넣어줍니다. */}\n                {/* <컴포넌트 명 [props 명]={넘겨줄 것(리스트, 문자열, 숫자, ...)}/> */}\n                {/* Route 쓰는 법 2가지를 모두 써봅시다! */}\n                {!is_Loaded ? (\n                    <Spinner />\n                ) : (\n                    <Routes>\n                        <Route path=\"/\" element={<BucketList />} />\n                        <Route path=\"/detail\" element={<Detail />}>\n                            <Route path=\":id\" element={<Detail />} />\n                        </Route>\n                        <Route path={\"*\"} element={<NotFound />} />\n                    </Routes>\n                )}\n            </Container>\n        </div>\n    );\n};\n\nconst Input = styled.div`\n    max-width: 350px;\n    min-height: 10vh;\n    background-color: #fff;\n    padding: 16px;\n    margin: 20px auto;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n`;\n\nconst Container = styled.div`\n    max-width: 350px;\n    min-height: 60vh;\n    background-color: #fff;\n    padding: 16px;\n    margin: 20px auto;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n`;\n\nconst Title = styled.h1`\n    color: slateblue;\n    text-align: center;\n`;\n\nconst Line = styled.hr`\n    margin: 16px 0px;\n    border: 1px dotted #ddd;\n`;\n\nexport default connect(mapStateTopProps, mapDispatchToProps)(App);\n","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/reportWebVitals.js",[],[],"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/BucketList.js",["70"],[],"// 리액트 패키지를 불러옵니다.\nimport React, { useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n// redux hook을 불러옵니다.\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createBucket, isLoaded } from \"./redux/modules/bucket\";\n\nimport { addDoc, collection, doc } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\n\nconst BucketList = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    // 버킷리스트를 리덕스 훅으로 가져오기\n    const bucket_list = useSelector((state) => state.bucket.list);\n\n    //const initialState = [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\"];\n    //const [list, setList] = useState(initialState);\n    // const addTodo = () => {\n    //     setList([...list, todoInput.current.value]);\n    //     console.log(list)\n    // }\n\n    //console.log(\"나오나\", bucket_data);\n\n    const todoInput = useRef();\n\n    const addTodoDispatch = async () => {\n        const addData = await addDoc(collection(db, \"bucket_list\"), { text: todoInput.current.value, completed: false });\n        //console.log(addData.id);\n        dispatch(createBucket({ id: addData.id, text: todoInput.current.value }));\n        dispatch(isLoaded(true));\n        todoInput.current.value = \"\";\n        todoInput.current.focus();\n    };\n\n    const enterPress = (e) => {\n        if (e.key === \"Enter\") {\n            addTodoDispatch();\n        }\n    };\n\n    return (\n        <>\n            <ListStyle>\n                {bucket_list.map((list, index) => {\n                    return (\n                        <ItemStyle\n                            key={index}\n                            className=\"list_item\"\n                            color={list.completed ? \"orange\" : \"aliceblue\"}\n                            onClick={() => {\n                                navigate(`detail?${index}`);\n                            }}\n                        >\n                            {list.text}\n                        </ItemStyle>\n                    );\n                })}\n            </ListStyle>\n            <Input>\n                <input type=\"text\" ref={todoInput} onKeyPress={enterPress} />\n                <button onClick={addTodoDispatch}>추가하기</button>\n            </Input>\n        </>\n    );\n};\n\nconst ListStyle = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n`;\n\nconst ItemStyle = styled.div`\n    padding: 16px;\n    margin: 8px;\n    background-color: ${(props) => props.color};\n`;\n\nconst Input = styled.div`\n    max-width: 350px;\n    min-height: 10vh;\n    background-color: #fff;\n    padding: 16px;\n    margin: 20px auto;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n`;\n\nexport default BucketList;\n","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Detail.js",["71","72"],[],"// 리액트 패키지를 불러옵니다.\nimport React from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n// redux hook을 불러옵니다.\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteBucket, doneBucket, isLoaded } from \"./redux/modules/bucket\";\n\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nimport { addDoc, collection, deleteDoc, doc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\nimport styled from \"styled-components\";\n\nconst Detail = (props) => {\n    // 1. useLocation 훅 취득\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    let dataIdx = location.search.substring(1);\n\n    // 스토어에서 상태값 가져오기\n    const bucket_list = useSelector((state) => state.bucket.list);\n\n    const delList = () => {\n        deleteDoc(doc(db, \"bucket_list\", bucket_list[dataIdx].id));\n        dispatch(deleteBucket(bucket_list[dataIdx].id));\n        dispatch(isLoaded(true));\n        navigate(-1);\n    };\n\n    const todoDone = () => {\n        updateDoc(doc(db, \"bucket_list\", bucket_list[dataIdx].id), { completed: true });\n        dispatch(doneBucket(bucket_list[dataIdx].id));\n        dispatch(isLoaded(true));\n        navigate(-1);\n    };\n\n    return (\n        <>\n            <h1>{dataIdx} 번째 상세 페이지입니다! </h1>\n            <TodoText>{bucket_list[dataIdx]?.text}</TodoText>\n            <ButtonGroup>\n                <Button onClick={todoDone}>완료하기</Button>\n                <Button onClick={delList}>삭제하기</Button>\n            </ButtonGroup>\n        </>\n    );\n};\n\nconst TodoText = styled.div`\n    border-radius: 3px;\n    padding: 5px;\n    margin-bottom: 10px;\n`;\n\nexport default Detail;\n","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/NotFound.js",[],[],"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/redux/configStore.js",[],[],"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/redux/modules/bucket.js",["73","74"],[],"const LOAD = \"bucket/LOAD\";\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = \"bucket/DELETE\";\nconst DONE = \"bucket/DONE\";\nconst LOADED = \"bucket/LOADED\";\n\nconst initialState = {\n    is_Loaded: false,\n    //list: [\"영화관 가기 redux\", \"매일 책읽기 redux\", \"수영 배우기 redux\"],\n    list: [\n        // { text: \"영화관 가기\", completed: false },\n    ],\n};\n\nexport const loadBucket = (bucket) => {\n    return { type: LOAD, bucket };\n};\n\nexport const createBucket = (bucket) => {\n    return { type: CREATE, bucket };\n};\n\nexport const deleteBucket = (id) => {\n    return { type: DELETE, id };\n};\n\nexport const doneBucket = (id) => {\n    return { type: DONE, id };\n};\n\nexport const isLoaded = (loaded) => {\n    return { type: LOADED, loaded };\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        // do reducer stuff\n        case \"bucket/LOAD\":\n            return { is_loaded: true, list: action.bucket };\n\n        case \"bucket/CREATE\":\n            const add_bucket_list = [...state.list, { ...action.bucket, completed: false }];\n            return { list: add_bucket_list };\n\n        case \"bucket/DELETE\":\n            if (state.list.length > 0) {\n                const del_bucket_list = state.list.filter((item) => item.id != action.id);\n                return { list: del_bucket_list };\n            }\n            return state;\n\n        case \"bucket/DONE\":\n            const done_bucket_list = state.list.map((item) => {\n                if (item.id == action.id) {\n                    return { ...item, completed: true };\n                }\n                return item;\n            });\n            return { list: done_bucket_list };\n        case \"bucket/LOADED\":\n            return { ...state, is_Loaded: action.loaded };\n        default:\n            return state;\n    }\n}\n","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Progress.js",["75","76","77"],[],"import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst Progress = () => {\n    const bucket_list = useSelector((state) => state.bucket.list);\n\n    let count = 0;\n\n    let goal_per = bucket_list.map((item, idx) => {\n        if (item.completed) {\n            count++;\n        }\n    });\n\n    return (\n        <ProgressBar>\n            <HighLight width={(count / bucket_list.length) * 100 + \"%\"} />\n        </ProgressBar>\n    );\n};\n\nconst ProgressBar = styled.div`\n    background: #eee;\n    width: 100%;\n    height: 40px;\n`;\n\nconst HighLight = styled.div`\n    background: orange;\n    width: ${(props) => (props.width === \"NaN%\" ? \"0%\" : props.width)};\n    height: 40px;\n    transition: 0.3s;\n`;\n\nexport default Progress;\n","/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/firebase.js",[],[],"/Users/jayonglee/00_Study/Javascript/spartaReact/bucketlist/src/Spinner.js",[],[],{"ruleId":"78","severity":1,"message":"79","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":34},{"ruleId":"78","severity":1,"message":"82","line":1,"column":36,"nodeType":"80","messageId":"81","endLine":1,"endColumn":44},{"ruleId":"78","severity":1,"message":"83","line":2,"column":25,"nodeType":"80","messageId":"81","endLine":2,"endColumn":36},{"ruleId":"78","severity":1,"message":"84","line":3,"column":19,"nodeType":"80","messageId":"81","endLine":3,"endColumn":26},{"ruleId":"78","severity":1,"message":"85","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":58,"column":8,"nodeType":"88","endLine":58,"endColumn":10,"suggestions":"89"},{"ruleId":"78","severity":1,"message":"90","line":85,"column":7,"nodeType":"80","messageId":"81","endLine":85,"endColumn":12},{"ruleId":"78","severity":1,"message":"91","line":10,"column":30,"nodeType":"80","messageId":"81","endLine":10,"endColumn":33},{"ruleId":"78","severity":1,"message":"85","line":11,"column":10,"nodeType":"80","messageId":"81","endLine":11,"endColumn":16},{"ruleId":"78","severity":1,"message":"92","line":11,"column":18,"nodeType":"80","messageId":"81","endLine":11,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":47,"column":77,"nodeType":"95","messageId":"96","endLine":47,"endColumn":79},{"ruleId":"93","severity":1,"message":"97","line":54,"column":29,"nodeType":"95","messageId":"96","endLine":54,"endColumn":31},{"ruleId":"78","severity":1,"message":"98","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":21},{"ruleId":"78","severity":1,"message":"99","line":11,"column":9,"nodeType":"80","messageId":"81","endLine":11,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":11,"column":48,"nodeType":"102","messageId":"103","endLine":11,"endColumn":50},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useLocation' is defined but never used.","'Connect' is defined but never used.","'addDoc' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'Input' is assigned a value but never used.","'doc' is defined but never used.","'collection' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useDispatch' is defined but never used.","'goal_per' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"105","fix":"106"},"Update the dependencies array to be: [dispatch]",{"range":"107","text":"108"},[1946,1948],"[dispatch]"]